import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = ''


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


bosh_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="Matematika üî¢"),
            
        ],
        [
            KeyboardButton(text="Fizika üõ¢Ô∏è"),
            KeyboardButton(text="Trud ü™µ")  
        ],
        [
            KeyboardButton(text="Ximiya üí©"),
        ],
    ],
    resize_keyboard=True
)



Matematika_keyboards = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å"),
            KeyboardButton(text="–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å"),            
        ],
        [
            KeyboardButton(text="–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å"),
            KeyboardButton(text="–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å"),
        ],
        [
            KeyboardButton(text="–ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å"),
        ],
        [
            KeyboardButton(text="Orqaga")
        ]
    ],
    resize_keyboard=True
)

 
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("Hello", reply_markup=bosh_menu)

 
@dp.message_handler(text="Matematika üî¢")
async def send_welcome(message: types.Message):
    await message.reply("Mana", reply_markup=Matematika_keyboards)



@dp.message_handler(text="Orqaga")
async def send_welcome(message: types.Message):
    await message.reply("Orqaga", reply_markup=bosh_menu)



@dp.message_handler(text="–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å")
async def send_welcome(message: types.Message):
   await message.answer_poll(
        question="1+1= ?",
        options=["2569", "4326", "86543", "2345676", "2"],
        is_anonymous=False,
        correct_option_id=2,
        type="quiz"
    )
   



@dp.message_handler(text="–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å")
async def send_welcome(message: types.Message):
   await message.answer_poll(
        question="–º–∞—Ç–µ–º–∞...?",
        options=["—Ç–∏–∫–∞", "—Ñ–∏–≥–∞", "–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ —Ç—ã ?", "–Ø–î–ï–†–ù–ê–Ø –°–¢–ê–ù–¶–ò–Ø"],
        is_anonymous=False,
        correct_option_id=0 ,
        type="quiz"
    )
#    await asyncio.sleep(3)


@dp.message_handler(text="–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å")
async def send_welcome(message: types.Message):
   await message.answer_poll(
        question="2*2= ?",
        options=["3", "4326", "4", "7", "2"],
        is_anonymous=False,
        correct_option_id=2,
        type="quiz"
    )
   



@dp.message_handler(text="–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å")
async def send_welcome(message: types.Message):
   await message.answer_poll(
        question="1+3?",
        options=["–∞–≤—Ç–æ–º–∞—Ç", "5", "?", "–∞—Ö–∞–∞—Ö—Ö–∞—Ö–∞", "–Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"],
        is_anonymous=False,
        correct_option_id=0 ,
        type="quiz"
    )
   



@dp.message_handler(text="–ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å")
async def send_welcome(message: types.Message):
   await message.answer_poll(
        question="1*1",
        options=["–∞", "–±", "–≤", "–º—Ä–µ–∫—à–≥–ø", "–≥–∏—Ç–ª–µ—Ä"],
        is_anonymous=False,
        correct_option_id=4 ,
        type="quiz"
    )

















if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
